@model DefectLoggingApp.Models.DefectViewModel

    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 10px;
            background-color: #f0f0f0;
        }

        .header {
            background-color: #4472C4;
            color: white;
            padding: 5px 10px;
            font-weight: bold;
            margin-bottom: 10px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .controls {
            display: flex;
            gap: 5px;
            align-items: center;
        }

        .btn {
            background-color: #4472C4;
            color: white;
            border: none;
            padding: 5px 10px;
            border-radius: 3px;
            cursor: pointer;
            font-size: 12px;
        }

        .btn:hover {
            background-color: #365a96;
        }

        .btn.active {
            background-color: #2d4a80;
        }

        .status-hold {
            background-color: #ff0000;
            color: white;
            padding: 2px 6px;
            border-radius: 3px;
            font-size: 11px;
        }

        .grid-container {
            position: relative;
            border: 1px solid #ccc;
            background-color: white;
            overflow: auto;
            height: 310px;
            margin-bottom: 10px;
        }

        .grid-ruler-x {
            position: sticky;
            top: 0;
            background-color: #f8f9fa;
            border-bottom: 1px solid #ccc;
            height: 30px;
            display: flex;
            z-index: 10;
        }

        .grid-ruler-y {
            position: sticky;
            left: 0;
            background-color: #f8f9fa;
            border-right: 1px solid #ccc;
            width: 40px;
            z-index: 10;
        }

        .ruler-cell {
            border-right: 1px solid #ddd;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 11px;
            font-weight: bold;
        }

        .ruler-cell-y {
            border-bottom: 1px solid #ddd;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 11px;
            font-weight: bold;
            height: 47px;
            width: 40px;
        }

        .grid-content {
            position: relative;
        }

        .grid-row {
            display: flex;
            height: 47px;
        }

        .grid-cell {
            width: 40px;
            height: 47px;
            border: 1px solid #ddd;
            cursor: crosshair;
            position: relative;
        }

        .grid-cell.selected {
            border: 2px solid #ff0000 !important;
            box-shadow: inset 0 0 0 1px #ff0000;
        }

        .grid-cell.selecting {
            border: 2px dashed #0066cc !important;
        }

        .bottom-panel {
            display: flex;
            gap: 10px;
            height: 200px;
        }

        .defect-types {
            width: 300px;
            border: 1px solid #ccc;
            background-color: white;
        }

        .defect-types-header {
            background-color: #f8f9fa;
            padding: 5px 10px;
            border-bottom: 1px solid #ccc;
            font-weight: bold;
            font-size: 12px;
        }

        .defect-type-row {
            display: flex;
            border-bottom: 1px solid #eee;
            cursor: pointer;
            font-size: 11px;
        }

        .defect-type-row:hover {
            background-color: #f8f9fa;
        }

        .defect-type-row.selected {
            background-color: #e3f2fd;
        }

        .defect-type-cell {
            padding: 3px 5px;
            border-right: 1px solid #eee;
            text-align: center;
        }

        .defect-records {
            flex: 1;
            border: 1px solid #ccc;
            background-color: white;
            overflow: auto;
        }

        .defect-records-header {
            background-color: #4472C4;
            color: white;
            display: flex;
            font-size: 11px;
            font-weight: bold;
            position: sticky;
            top: 0;
        }

        .defect-record-cell {
            padding: 3px 5px;
            border-right: 1px solid #6699ff;
            text-align: center;
            flex: 1;
        }

        .defect-record-row {
            display: flex;
            border-bottom: 1px solid #eee;
            font-size: 11px;
        }

        .defect-record-row:hover {
            background-color: #f8f9fa;
        }

        .navigation-controls {
            margin: 10px 0;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .severity-selector {
            margin: 10px 0;
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .severity-btn {
            width: 30px;
            height: 30px;
            border: 1px solid #ccc;
            background-color: white;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
        }

        .severity-btn.selected {
            background-color: #4472C4;
            color: white;
        }

        .color-legend {
            position: fixed;
            top: 10px;
            right: 10px;
            background-color: white;
            border: 1px solid #ccc;
            padding: 10px;
            font-size: 11px;
            max-width: 300px;
            z-index: 1000;
            display: none;
        }

        .legend-item {
            display: flex;
            align-items: center;
            margin-bottom: 3px;
        }

        .legend-color {
            width: 15px;
            height: 15px;
            margin-right: 5px;
            border: 1px solid #ccc;
        }

        .search-box {
            margin: 10px 0;
        }

        .search-box input {
            padding: 5px;
            border: 1px solid #ccc;
            width: 200px;
        }

        .modal-overlay {
            display: none;
            position: fixed;
            right: 0; bottom: 0;
            background: rgba(0,0,0,0.35);
            z-index: 999;
            justify-content: center;
            align-items: center;
            transition: background 0.2s;
        }

        .modal-overlay.active {
            display: flex;
        }

        .modal {
            display: flex;
            flex-direction: column;
            align-items: stretch;
            min-width: 340px;
            max-width: 420px;
            max-height: 55vh;
            width: 90vw;
            background: #fff;
            border-radius: 10px;
            border: 2px solid #4472C4;
            box-shadow: 0 8px 32px rgba(44, 62, 80, 0.18);
            padding: 24px 28px 18px 28px;
            z-index: 1000;
            position: relative;
            animation: modalFadeIn 0.25s cubic-bezier(.4,0,.2,1);
        }

        .modal h3 {
            margin-top: 0;
            margin-bottom: 18px;
            color: #4472C4;
            font-size: 1.25rem;
            font-weight: bold;
            text-align: center;
            letter-spacing: 0.5px;
        }

        .modal label {
            font-weight: 500;
            color: #365a96;
            margin-bottom: 3px;
            display: block;
        }

        .modal select,
        .modal textarea {
            width: 100%;
            padding: 6px 8px;
            border: 1px solid #ccc;
            border-radius: 4px;
            font-size: 1rem;
            margin-bottom: 12px;
            box-sizing: border-box;
            background: #f8f9fa;
            transition: border-color 0.2s;
        }

        .modal select:focus,
        .modal textarea:focus {
            border-color: #4472C4;
            outline: none;
        }

        .modal button[type="submit"],
        .modal button[type="button"] {
            margin-top: 8px;
            margin-right: 8px;
            min-width: 90px;
        }

        .modal button[type="submit"] {
            background-color: #4472C4;
            color: white;
            border: none;
            border-radius: 3px;
            padding: 7px 16px;
            font-size: 1rem;
            cursor: pointer;
            transition: background 0.2s;
        }

        .modal button[type="submit"]:hover {
            background-color: #365a96;
        }

        .modal button[type="button"] {
            background: #f0f0f0;
            color: #365a96;
            border: 1px solid #ccc;
            border-radius: 3px;
            padding: 7px 16px;
            font-size: 1rem;
            cursor: pointer;
            transition: background 0.2s;
        }

        .modal button[type="button"]:hover {
            background: #e3f2fd;
            color: #4472C4;
        }
    </style>


    <div class="header">
        <span>Defect Logging Map - Winding Mode</span>
        <div class="controls">
            <button class="btn" id="btnStart">⚫ Start</button>
            <button class="btn" id="btnEnd">⚫ End</button>
            <button class="btn" id="btnDelete">⚫ Delete</button>
            <button class="btn" id="btnSRow">⚫ S Row</button>
            <button class="btn" id="btnMRow">⚫ M Row</button>
        </div>
    </div>

    <div class="navigation-controls">
        <button class="btn" onclick="navigateGrid('first')">⏮ First</button>
        <button class="btn" onclick="navigateGrid('prev')">◀ Prev</button>
        <button class="btn" onclick="navigateGrid('next')">Next ▶</button>
        <button class="btn" onclick="navigateGrid('last')">Last ⏭</button>
        <button class="btn" onclick="refreshGrid()">🔄 Refresh</button>
        <label>
            Cell Size:
            <select id="cellSize" onchange="changeCellSize()">
                <option value="1" selected>1</option>
                <option value="2">2</option>
                <option value="3">3</option>
                <option value="4">4</option>
                <option value="5">5</option>
                <option value="6">6</option>
                <option value="7">7</option>
                <option value="8">8</option>
                <option value="9">9</option>
                <option value="10">10</option>
                <option value="20">20</option>
                <option value="50">50</option>
                <option value="100">100</option>
            </select>
        </label>
        <button class="btn" onclick="showDefectImage()">Show Defect</button>
        <button class="btn" onclick="showCoilImage()">Show Coil Image</button>
        <button class="btn" onclick="toggleColorLegend()">Color Convention</button>
    </div>

    <div class="grid-container" id="gridContainer">
        <!-- Grid will be generated by JavaScript -->
    </div>

    <div class="header"></div>

    <div class="defect-records">
        <div class="defect-records-header">
            <div class="defect-record-cell">Log ID</div>
            <div class="defect-record-cell">St Wd</div>
            <div class="defect-record-cell">End Wd</div>
            <div class="defect-record-cell">St Ln</div>
            <div class="defect-record-cell">End Ln</div>
            <div class="defect-record-cell">Tot Ln</div>
            <div class="defect-record-cell">Type</div>
            <div class="defect-record-cell">Defect Name</div>
            <div class="defect-record-cell">Severity</div>
            <div class="defect-record-cell">Defect Image</div>
            <div class="defect-record-cell">Mother Coil</div>
            <div class="defect-record-cell">Daughter Coil</div>
            <div class="defect-record-cell">Remarks</div>
            <div class="defect-record-cell">Timestamp</div>
        </div>
        <div id="defectRecordsList">

        </div>
    </div> 

    <div id="selectedCellsPopup" class="modal-overlay">
        <div class="modal">
            <h3>Add Defect</h3>
            <div>
                <p>
                    <strong>Length Range:</strong> <span id="xRange"></span><br />
                    <strong>Width Range:</strong> <span id="yRange"></span>
                </p>
                <form id="defectForm">
                    <label for="defectType">Defect Type:</label>
                    <select id="defectType" name="defectType" required>
                        <option value="">Select...</option>
                        @foreach (var defect in @Model.DefectTypes)
                        {
                            <option value="@defect.Code">@defect.Name</option>
                        }
                    </select>
                    <br /><br />
                    <label for="defectSeverity">Severity:</label>
                    <select id="defectSeverity" name="defectSeverity" required>
                        <option value="">Select...</option>
                        @for (int i = 1; i <= 5; i++)
                        {
                            <option value="@i">@i</option>
                        }
                    </select>
                    <br /><br />
                    <label for="remarks">Remarks:</label>
                    <textarea id="remarks" name="remarks" rows="3" placeholder="Enter your remarks"></textarea>
                    <button type="submit">Add Defect</button>
                    <button type="button" onclick="closePopup()">Cancel</button>
                </form>
            </div>
        </div>
    </div>
    

    <div class="color-legend" id="colorLegend">
        <h4>Colour Convention Screen</h4>
        <div class="legend-item">
            <div class="legend-color" style="background-color: #ff0000;"></div>
            <span>Indicates Start of a Defect.</span>
        </div>
        <div class="legend-item">
            <div class="legend-color" style="background-color: #ffa500;"></div>
            <span>Indicates Start of More Than One Defect.</span>
        </div>
        <div class="legend-item">
            <div class="legend-color" style="background-color: #ffff00;"></div>
            <span>Endpoint of Defect, Log Name Or Severity.</span>
        </div>
        <div class="legend-item">
            <div class="legend-color" style="background-color: #90EE90;"></div>
            <span>Cell Having Complete Information of the Single Surface Defect.</span>
        </div>
        <div class="legend-item">
            <div class="legend-color" style="background-color: #00ff00;"></div>
            <span>Cell With Multiple Surface Defects, But Complete Information.</span>
        </div>
        <div class="legend-item">
            <div class="legend-color" style="background-color: #87CEEB;"></div>
            <span>Cell With Multiple Shape Defects, But Complete Information.</span>
        </div>
        <div class="legend-item">
            <div class="legend-color" style="background-color: #0000ff;"></div>
            <span>Cell Having Complete Information, But Mixed Defects. Both Surface and Shape Together.</span>
        </div>
    </div>

    @section Scripts {
        <script>
            let currentPosition = 0;
            let cellSize = @Model.CellSize;
            let started = false;
            let isSelecting = false;
            let selectedSeverity = null;
            let selectedDefectType = null;
            let selectionStart = null;
            let selectionEnd = null;
            let isSingleRow = null;

            document.addEventListener('DOMContentLoaded', function() {
                initializeGrid();
                toggleColorLegend();
                setupEventListeners();
                loadDefects();
            });

            function setupEventListeners() {
                document.getElementById('gridContainer').addEventListener('mousedown', mouseClick);
                document.getElementById('gridContainer').addEventListener('mousemove', updateSelection);
                document.addEventListener('contextmenu', function (event) {
                    event.preventDefault();
                });
            }

            function initializeGrid() {
                const container = document.getElementById('gridContainer');
                const coilWidth = @Model.CoilData.Width;
                const coilHeight = Math.ceil(coilWidth/5);
                const labels = [0, coilHeight, coilHeight*2, coilHeight*3, coilHeight*4, coilHeight*5].reverse();
                const cellWidth = 40;
                const cellHeight = 47;

                container.style.maxHeight = 'none'; // remove scroll limit
                container.style.overflow = 'hidden'; // disable scrollbars

                let html = '<div class="grid-ruler-x">';
                html += '<div class="ruler-cell" style="width: 60px; position: sticky; left: 0; background-color: #f8f9fa; z-index: 11;"></div>';

                for (let i = 0; i < 30; i++) {
                    html += `<div class="ruler-cell" style="width: ${cellWidth}px;">${currentPosition + (i*cellSize)}</div>`;
                }
                html += '</div>';

                html += '<div class="grid-content">';

                for (let y = 0; y < 5; y++) {
                    html += '<div class="grid-row" style="display: flex;">';
                    // Ruler for Y-axis
                    html += `<div class="ruler-cell-y" style="width: 60px; height: ${coilHeight}px; position: sticky; left: 0;
                            background-color: #f8f9fa; z-index: 12; display: flex;
                            align-items: flex-start; justify-content: flex-end; padding-right: 5px;
                            font-weight: bold; font-size: 14px; margin-top: -8px;">
                            ${labels[y]}
                        </div>`;
                    for (let x = 0; x < 30; x++) {
                        html += `<div class="grid-cell"
                                     data-x="${currentPosition + (x * cellSize)}"
                                     data-y="${labels[y]}"
                                     style="width: ${cellWidth}px; height: ${cellHeight}px;
                                            border: 1px solid #ccc; background-color: white;">
                              </div>`;
                    }
                    html += '</div>';
                }
                html += '<div class="grid-row" style="display: flex;">';
                    // Ruler for Y-axis
                html += `<div class="ruler-cell-y" style="width: 60px; height: ${coilHeight}px; position: sticky; left: 0;
                            background-color: #f8f9fa; z-index: 12; display: flex;
                            align-items: flex-start; justify-content: flex-end; padding-right: 5px;
                            font-weight: bold; font-size: 14px; margin-top: -8px;">
                            ${labels[5]}
                        </div>`;
                html += '</div>';
                html += '</div>';
                container.innerHTML = html;
                updateGridColors();
            }


            function updateGridColors() {
                fetch(`/Defect/GetGridData?position=${currentPosition}&cellSize=${cellSize}`)
                    .then(response => response.json())
                    .then(data => {
                        data.forEach(cellData => {
                            const cell = document.querySelector(`[data-x="${cellData.x}"][data-y="${cellData.y}"]`);
                            if (cell) {
                                cell.style.backgroundColor = cellData.color;
                            }
                        });
                    });
            }

            function mouseClick(event) {
                event.preventDefault();
                if (!started) return;
                if (event.button == 0) {
                    if (event.target.classList.contains('grid-cell')) {
                        isSelecting = true;
                        selectionStart = {
                            x: parseInt(event.target.dataset.x),
                            y: parseInt(event.target.dataset.y)
                        };
                        clearSelection();
                    }
                    event.target.classList.add('selecting');
                } else if (event.button == 2) {
                    if (!started || !isSelecting) return;
                    started = false;
                    isSelecting = false;
                    const coilWidth = @Model.CoilData.Width;
                    const cellHeight = Math.ceil(coilWidth/5)
                    if (selectionStart && selectionEnd) {
                        const selection = {
                            StartX: Math.min(selectionStart.x, selectionEnd.x),
                            EndX: Math.max(selectionStart.x, selectionEnd.x),
                            StartY: Math.min(selectionStart.y, selectionEnd.y) - cellHeight,
                            EndY: Math.max(selectionStart.y, selectionEnd.y),
                        };
                        showSelected(selection);
                        showPopup(selection);
                    }
                   
                };
                
            }

            function updateSelection(event) {
                const coilWidth = @Model.CoilData.Width;
                const cellHeight = Math.ceil(coilWidth/5)
                if (!started) return;
                if (isSelecting && event.target.classList.contains('grid-cell')) {
                    if (!isSingleRow) {
                        selectionEnd = {
                            x: parseInt(event.target.dataset.x),
                            y: parseInt(event.target.dataset.y)
                        };
                    } else {
                        selectionEnd = {
                            x: parseInt(event.target.dataset.x),
                            y: selectionStart.y
                        };
                    };
                    highlightSelection();
                }
            }

            function highlightSelection() {
                clearSelection();
                if (!selectionStart || !selectionEnd) return;

                const minX = Math.min(selectionStart.x, selectionEnd.x);
                const maxX = Math.max(selectionStart.x, selectionEnd.x);
                const minY = Math.min(selectionStart.y, selectionEnd.y);
                const maxY = Math.max(selectionStart.y, selectionEnd.y);

                for (let x = minX; x <= maxX; x++) {
                    if(isSingleRow) {
                         const cell = document.querySelector(`[data-x="${x}"][data-y="${selectionStart.y}"]`);
                         if (cell) {
                             cell.classList.add('selecting');
                         }
                    } else {
                        for (let y = minY; y <= maxY; y++) {
                            const cell = document.querySelector(`[data-x="${x}"][data-y="${y}"]`);
                            if (cell) {
                                cell.classList.add('selecting');
                            }
                        }
                    }
                }
            }

            function showSelected(selection) {  
                const coilWidth = @Model.CoilData.Width;
                const cellHeight = Math.ceil(coilWidth/5)
                for (let x = selection.StartX; x <= selection.EndX; x++) {
                    if(isSingleRow) {
                     const cell = document.querySelector(`[data-x="${x}"][data-y="${selection.StartY+cellHeight}"]`);
                         if (cell) {
                            cell.classList.add('selected');
                            cell.classList.remove('selecting');
                         }
                    } else {
                        for (let y = selection.StartY+cellHeight; y <= selection.EndY; y++) {
                            const cell = document.querySelector(`[data-x="${x}"][data-y="${y}"]`);
                            if (cell) {
                                cell.classList.add('selected');
                                cell.classList.remove('selecting');
                            }
                        }
                    }
                }
            }

            function clearSelection() {
                document.querySelectorAll('.grid-cell').forEach(cell => {
                    cell.classList.remove('selecting', 'selected');
                });
            }

            function showPopup(selection) {
                document.getElementById('xRange').textContent = `${selection.StartX} to ${selection.EndX}`;
                document.getElementById('yRange').textContent = `${selection.StartY} to ${selection.EndY}`;
                const popupElement = document.getElementById('selectedCellsPopup');
                popupElement.classList.add('active');
            }

            function closePopup(endIt=true) {
                document.getElementById('defectForm').reset();
                document.getElementById('selectedCellsPopup').classList.remove('active');
                if(endIt) end();
            }

            document.getElementById('defectForm').onsubmit = function(e) {
                e.preventDefault();
                const defectType = document.getElementById('defectType').value;
                const defectSeverity = document.getElementById('defectSeverity').value;
                const remarks = document.getElementById('remarks').value || '';
                const stringX = document.getElementById('xRange').textContent;
                const [startX, endX] = stringX.replace(" to ",",").split(",");
                const stringY = document.getElementById('yRange').textContent;
                const [startY, endY] = stringY.replace(" to ",",").split(",");
                let selection = {
                    StartX: startX,
                    EndX: endX,
                    StartY: startY,
                    EndY: endY
                };
                const timestamp = new Date().toISOString();
                if (selection && defectType && defectSeverity) {
                    addDefect(selection, defectType, defectSeverity, timestamp, remarks);
                }
                closePopup();
            };

            function addDefect(selection, DefectType, Severity, timestamp, remarks) {
                const defectData = {
                    StartX: parseInt(selection.StartX),
                    EndX: parseInt(selection.EndX),
                    StartY: parseInt(selection.StartY),
                    EndY: parseInt(selection.EndY),
                    DefectType,
                    Severity: parseInt(Severity),
                    timestamp,
                    remarks
                };
                fetch('/Defect/AddDefect', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(defectData)
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        loadDefects();
                        updateGridColors();
                    } else {
                        alert('Error adding defect: ' + data.error);
                    }
                });
            }

            function loadDefects() {
                fetch('/Defect/GetDefects')
                    .then(response => response.json())
                    .then(data => {
                        updateDefectList(data);
                    });
            }

            function updateDefectList(defects) {
                const container = document.getElementById('defectRecordsList');
                let html = '';

                defects.forEach(defect => {
                    html += `
                        <div class="defect-record-row" data-defect-id="${defect.Id}">
                            <div class="defect-record-cell">${defect.Id}</div>  
                            <div class="defect-record-cell">${defect.StartWidth}</div>
                            <div class="defect-record-cell">${defect.EndWidth}</div>
                            <div class="defect-record-cell">${defect.StartLength}</div>
                            <div class="defect-record-cell">${defect.EndLength}</div>
                            <div class="defect-record-cell">${defect.TotalLength}</div>
                            <div class="defect-record-cell">${defect.Type}</div>
                            <div class="defect-record-cell">${defect.DefectName}</div>
                            <div class="defect-record-cell">${defect.Severity}</div>
                            <div class="defect-record-cell">${defect.DefectImage||'No Data'}</div>
                            <div class="defect-record-cell">${defect.MotherCoil||'No Data'}</div>
                            <div class="defect-record-cell">${defect.DaughterCoil || 'No Data'}</div>
                            <div class="defect-record-cell">${defect.Remarks || 'None'}</div>
                            <div class="defect-record-cell">${defect.Timestamp}</div>
                        </div>`;
                });

                container.innerHTML = html;

                document.querySelectorAll('.defect-record-row').forEach(row => {
                    row.addEventListener('dblclick', function() {
                        const defectId = parseInt(this.dataset.defectId);
                        if (confirm('Are you sure you want to delete this defect?')) {
                            deleteDefect(defectId);
                        }
                    });
                });
            }

            function deleteDefect(id) {
                fetch('/Defect/DeleteDefect', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(id)
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        loadDefects();
                        updateGridColors();
                    } else {
                        alert('Error deleting defect: ' + data.error);
                    }
                });
            }

            function navigateGrid(direction) {
                const maxPosition = @Model.CoilData.Length;

                switch(direction) {
                    case 'first':
                        currentPosition = 0;
                        break;
                    case 'prev':
                        currentPosition = Math.max(0, currentPosition - 30);
                        break;
                    case 'next':
                        currentPosition = Math.min(maxPosition - 30, currentPosition + 30);
                        break;
                    case 'last':
                        currentPosition = maxPosition - 30;
                        break;
                }

                initializeGrid();
            }

            function changeCellSize() {
                cellSize = parseInt(document.getElementById('cellSize').value);
                initializeGrid();
            }

            function refreshGrid() {
                initializeGrid();
                loadDefects();
            }

            // function showDefectImage() {
            //     alert('Show Defect Image functionality would be implemented here');
            // }

            // function showCoilImage() {
            //     alert('Show Coil Image functionality would be implemented here');
            // }

            function toggleColorLegend() {
                const legend = document.getElementById('colorLegend');
                legend.style.display = legend.style.display === 'none' ? 'block' : 'none';
            }

            document.getElementById('btnStart').addEventListener('click', function() {
                started = true;
                isSingleRow = true;
                document.getElementById('btnStart').classList.add('active');
                document.getElementById('btnSRow').classList.add('active');
                document.getElementById('btnMRow').classList.remove('active');
            });

            document.getElementById('btnEnd').addEventListener('click', end);

            function end() {
                clearSelection();
                closePopup(false);
                started = false;
                isSingleRow = null;
                isSelecting = false;
                selectionStart = null;
                selectionEnd = null;
                selection = null;
                document.getElementById('btnStart').classList.remove('active');
                document.getElementById('btnSRow').classList.remove('active');
                document.getElementById('btnMRow').classList.remove('active');
            }

            document.getElementById('btnDelete').addEventListener('click', function() {
                if (confirm('Are you sure you want to clear all defects?')) {
                    fetch('/Defect/ClearDefects', { method: 'POST' })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                loadDefects();
                                updateGridColors();
                            }
                        });
                }
            });

            document.getElementById('btnSRow').addEventListener('click', function() {
                document.getElementById('btnMRow').classList.remove('active');
                document.getElementById('btnSRow').classList.add('active');
                isSingleRow = true;
            });

            document.getElementById('btnMRow').addEventListener('click', function() {
                document.getElementById('btnMRow').classList.add('active');
                document.getElementById('btnSRow').classList.remove('active');
                isSingleRow = false;
            });
        </script>
    }
